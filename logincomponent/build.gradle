if (LOGIN_COMPONENT_APPLICATION.toBoolean()) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}
//注解需要插件
apply plugin: 'kotlin-kapt'
//kotlin编写支持插件
apply plugin: 'kotlin-android'
//kotlin编写的扩展插件
apply plugin: 'kotlin-android-extensions'
android {
    compileSdkVersion versions.compileSdk
    defaultConfig {
        if (LOGIN_COMPONENT_APPLICATION.toBoolean()) {
            applicationId "com.frameDesign.logincomponent"
        }
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    }

    signingConfigs {
        release {
            if (project.hasProperty('MYAPP_RELEASE_STORE_FILE')) {
                storeFile file('../'+MYAPP_RELEASE_STORE_FILE)
                storePassword MYAPP_RELEASE_STORE_PASSWORD
                keyAlias MYAPP_RELEASE_KEY_ALIAS
                keyPassword MYAPP_RELEASE_KEY_PASSWORD
            }
        }
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    //构建版本和生产版本合成构建变体
    //构建版本
    buildTypes {
        debug {
            signingConfig signingConfigs.release
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    //资源配置
    sourceSets {
        main {
            if (LOGIN_COMPONENT_APPLICATION.toBoolean()) {
                manifest.srcFile 'src/main/AndroidManifest.xml'
            } else {
                manifest.srcFile 'src/main/manifest/AndroidManifest.xml'
            }
        }
    }

    //在非独立组件模式下，将该库打包成AAR并复制粘贴到app/libs目录下
    if (!LOGIN_COMPONENT_APPLICATION.toBoolean()) {
        //packagingAAR(project, providers)
        libraryVariants.all { variant ->
            if (variant.buildType.name == "release") {
                // 修改aar名称
                variant.outputs.all { output ->
                    outputFileName ="${project.name}-v${defaultConfig.versionName}_${defaultConfig.versionCode}-${variant.buildType.name}.aar"

                }
                // 复制aar到指定目录
                variant.assemble.doLast {
                    variant.outputs.all { output ->
                        // 输出目录在：app/libs/
                        def outputPath = [project.getParent().rootDir.absolutePath + "/app", "libs",].join(File.separator)
                        copy {
                            from output.outputFile
                            into outputPath
                        }
                        // 输入依赖语句
                        gradle.dependencieInfo.add("api(name: '${output.outputFile.name.replace('.aar', '')}', ext: 'aar')")
                        println("${gradle.dependencieInfo.join("\n")}")
                    }
                }
            }
        }
    }

    //资源前缀规范（layout文件名、values下name）
    resourcePrefix "${project.name}_"
}

//ali路由注解配置
kapt {
    arguments {
        arg("AROUTER_MODULE_NAME", project.getName())
    }
}
dependencies {
    //路由注解处理器
    kapt deps.arouter.arouter_compiler
    //基础组件
    implementation project(path: ':baselib')
}
